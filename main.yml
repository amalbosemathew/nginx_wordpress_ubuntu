---
- name: Installing Nginx And configuration
  hosts: all
  become: true
  vars_files:
    - vars.vars
  vars_prompt:
    - name: dname
      prompt: Enter Your Domain "eg example.com" and its must not exist
      private: no
    - name: mysql_user
      prompt: Enter Your Wordpress Databases Username "eg wordpress" and its must not exist
      private: no
    - name: mysql_db
      prompt: Enter Your Wordpress Database Name "eg wordpressdb" and its must not exist
      private: no
    - name: mysql_pw
      prompt: Enter Your Wordpress Databases Password "eg wordpressdbpassword"
      private: yes
  tasks:
    - name: "Installing NginX, PHP"
      apt:
        name:
          - nginx
          - php
          - php-mysql
          - php-fpm
        state: present

    - name: "Document root creation"
      file:
        path: "{{ droot }}/{{ dname }}"
        state: directory
        owner: "{{ ownr }}"
        group: "{{ ownr }}"

    - name: "Copy conf file from local to nginx"
      template:
        src: ./default.conf.tmpl
        dest: "/etc/nginx/sites-available/{{ dname }}"
      register: vhost_conf

    - name: "Create a symbolic link for nginx conf"
      file:
        src: "/etc/nginx/sites-available/{{ dname }}"
        dest: "/etc/nginx/sites-enabled/{{ dname }}"
        state: link

    - name: Remove  default file (delete file)
      when: vhost_conf.changed == true
      file:
        path: /etc/nginx/sites-available/default
        state: absent

    - name: Remove  default file (delete file)
      when: vhost_conf.changed == true
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent

    - name: "Nginx syntax checking"
      ignore_errors: true
      shell: nginx -t
      register: nginx_syn

    - name: "Nginx Syntax Status"
      when: nginx_syn.rc != 0
      debug:
        msg: "Status => {{ nginx_syn.stderr }}"

    - name: "when nginx is fail and quit the playbook"
      when: nginx_syn.rc != 0
      fail:
        msg: "Paly book exiting due to nginx syntax check failure."

    - name: "service enabling"
      when: vhost_conf.changed == true
      service:
        name: nginx
        state: restarted
        enabled: true

    - name: "apt update"
      apt:
        update_cache: yes

    - name: "mysql - package Installation"
      apt:
        name:
          - mysql-server
          - python3-pymysql
        state: present
      register: initial

    - name: "mysql - restarting/enabling service"
      service:
        name: mysql
        state: restarted
        enabled: true

    - name: "Change the authentication plugin of MySQL root user to mysql_native_password"
      ignore_errors: true
      shell: mysql -u root -e 'UPDATE mysql.user SET plugin="mysql_native_password" WHERE user="root" AND host="localhost"'

    - name: Flush Privileges
      ignore_errors: true
      shell: mysql -u root -e 'FLUSH PRIVILEGES'

    - name: "mysql - update root password"
      ignore_errors: true
      mysql_user:
        login_user: "root"
        login_password: ""
        login_host: localhost
        user: "root"
        password: "{{ mysql_root }}"
        host_all: true

    - name: "mysql - removing anonymous users"
      mysql_user:
        login_user: "root"
        login_password: "{{ mysql_root }}"
        user: ""
        state: absent

    - name: "mysql - removing test database"
      mysql_db:
        login_user: "root"
        login_password: "{{ mysql_root }}"
        name: "test"
        state: absent


    - name: "mysql - creating database"
      mysql_db:
        login_user: "root"
        login_password: "{{ mysql_root }}"
        name: "{{ mysql_db }}"
        state: present

    - name: "mysql - creating user & password"
      mysql_user:
        login_user: "root"
        login_password: "{{ mysql_root }}"
        user: "{{ mysql_user }}"
        password: "{{ mysql_pw }}"
        host: "%"
        priv: '{{ mysql_db }}.*:ALL'

    - name: "Wordpress - Downloading Tar File"
      get_url:
        url: "{{ wordpress_url }}"
        dest: /tmp/wordpress.tar.gz

    - name: "Wordpress - Extracting Wordpress.tar"
      unarchive:
        src: /tmp/wordpress.tar.gz
        dest: /tmp/
        remote_src: true

    - name: "Wordpress - Copying Contents"
      copy:
        src: /tmp/wordpress/
        dest: "{{ droot }}/{{ dname }}/"
        remote_src: true
        owner: "{{ ownr }}"
        group: "{{ ownr }}"

    - name: "Wordpress - Creating wp-config.php"
      template:
        src: wp-config.php.tmpl
        dest: "{{ droot }}/{{ dname }}/wp-config.php"
        owner: "{{ ownr }}"
        group: "{{ ownr }}"


    - name: "Post-Installation Restart"
      service:
        name: "{{ item }}"
        state: restarted
      with_items:
        - nginx
        - mysql

    - name: "Post-Installation Clean-Up"
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - /tmp/wordpress
        - /tmp/wordpress.tar.gz
